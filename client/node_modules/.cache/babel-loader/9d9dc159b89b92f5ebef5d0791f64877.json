{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBhQeOZUwmPfxmpP12XJLFn7HP9JmSMKXM\",\n  authDomain: \"crwn-db-5bc6e.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-5bc6e.firebaseio.com\",\n  projectId: \"crwn-db-5bc6e\",\n  storageBucket: \"crwn-db-5bc6e.appspot.com\",\n  messagingSenderId: \"139514886905\",\n  appId: \"1:139514886905:web:9726ba290610869bf20028\",\n  measurementId: \"G-LBJEEW4Q4L\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // queryReferece - documentReference\n\n  const userSnapshot = await userRef.get(); // document snapshot\n\n  if (!userSnapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.mesasge);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\n  const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    return {\n      id: docSnapshot.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  'prompt': 'select_account'\n});\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(authUser => {\n      unsubscribe();\n      resolve(authUser);\n    }, reject);\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["C:/Users/mohammad.maninang/Desktop/my-projects/crown-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","userSnapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","mesasge","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collectionsSnapshot","transformedCollection","docs","map","docSnapshot","title","items","data","id","routeName","encodeURI","toLowerCase","reduce","accumulator","googleProvider","GoogleAuthProvider","setCustomParameters","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","authUser"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBhQeOZUwmPfxmpP12XJLFn7HP9JmSMKXM\",\r\n    authDomain: \"crwn-db-5bc6e.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-5bc6e.firebaseio.com\",\r\n    projectId: \"crwn-db-5bc6e\",\r\n    storageBucket: \"crwn-db-5bc6e.appspot.com\",\r\n    messagingSenderId: \"139514886905\",\r\n    appId: \"1:139514886905:web:9726ba290610869bf20028\",\r\n    measurementId: \"G-LBJEEW4Q4L\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`); // queryReferece - documentReference\r\n    const userSnapshot = await userRef.get(); // document snapshot\r\n\r\n    if (!userSnapshot.exists) {\r\n        const { displayName, email } = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try {\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        } catch (error) {\r\n            console.log('error creating user', error.mesasge)\r\n        }\r\n    }\r\n\r\n    return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n    });\r\n\r\n    return await batch.commit();\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\r\n    const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\r\n        const { title, items } = docSnapshot.data();\r\n        return {\r\n            id: docSnapshot.id,\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            title,\r\n            items\r\n        }\r\n    });\r\n\r\n    return transformedCollection.reduce((accumulator, collection) => {\r\n        accumulator[collection.title.toLowerCase()] = collection;\r\n        return accumulator;\r\n    }, {})\r\n};\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({\r\n    'prompt': 'select_account'\r\n});\r\n\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const unsubscribe = auth.onAuthStateChanged(authUser => {\r\n            unsubscribe();\r\n            resolve(authUser);\r\n        }, reject);\r\n    });\r\n}\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}