{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport userActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\nexport function* setSnapshotfromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const userAuth = yield auth.signInWithPopup(googleProvider);\n    yield call(setSnapshotfromUserAuth, userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const userAuth = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(setSnapshotfromUserAuth, userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  const userAuth = yield getCurrentUser();\n\n  if (userAuth) {\n    yield call(setSnapshotfromUserAuth, userAuth);\n  } else {\n    return;\n  }\n}\n;\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    ...otherData\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: { ...otherData\n      }\n    }));\n  } catch (error) {\n    const errorCode = error.code;\n    let errorMessage = error.message;\n\n    switch (errorCode) {\n      case 'auth/email-already-in-use':\n        errorMessage = 'Email already exists';\n        break;\n\n      case 'auth/invalid-email':\n        errorMessage = 'Invalid email';\n        break;\n\n      case 'auth/weak-password':\n        errorMessage = 'The password is too weak.';\n        break;\n\n      default:\n        errorMessage = error.message;\n        break;\n    }\n\n    yield put(signUpFailure(errorMessage));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield call(setSnapshotfromUserAuth, user, additionalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_ACTION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(userActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport default function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/mohammad.maninang/Desktop/my-projects/crown-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","auth","googleProvider","createUserProfileDocument","getCurrentUser","userActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","setSnapshotfromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","otherData","user","createUserWithEmailAndPassword","errorCode","code","errorMessage","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_ACTION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, all } from 'redux-saga/effects';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nimport userActionTypes from './user.types';\r\nimport {\r\n    signInSuccess, signInFailure, signOutSuccess,\r\n    signOutFailure, signUpFailure, signUpSuccess\r\n} from './user.actions';\r\n\r\nexport function* setSnapshotfromUserAuth(userAuth, additionalData) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n    } catch (error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const userAuth = yield auth.signInWithPopup(googleProvider);\r\n        yield call(setSnapshotfromUserAuth, userAuth);\r\n    } catch (error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n    try {\r\n        const userAuth = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield call(setSnapshotfromUserAuth, userAuth);\r\n    } catch (error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n    const userAuth = yield getCurrentUser();\r\n    if (userAuth) {\r\n        yield call(setSnapshotfromUserAuth, userAuth);\r\n    } else {\r\n        return;\r\n    }\r\n};\r\n\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    } catch (error) {\r\n        yield put(signOutFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* signUp({ payload: { email, password, ...otherData } }) {\r\n    try {\r\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n        yield put(signUpSuccess({ user, additionalData: { ...otherData } }));\r\n    } catch (error) {\r\n        const errorCode = error.code;\r\n        let errorMessage = error.message;\r\n\r\n        switch (errorCode) {\r\n            case 'auth/email-already-in-use':\r\n                errorMessage = 'Email already exists';\r\n                break;\r\n            case 'auth/invalid-email':\r\n                errorMessage = 'Invalid email';\r\n                break;\r\n            case 'auth/weak-password':\r\n                errorMessage = 'The password is too weak.';\r\n                break;\r\n            default:\r\n                errorMessage = error.message;\r\n                break;\r\n        }\r\n\r\n        yield put(signUpFailure(errorMessage))\r\n    }\r\n}\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\r\n    yield call(setSnapshotfromUserAuth, user, additionalData);\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(userActionTypes.CHECK_USER_ACTION, isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(userActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n}\r\n\r\nexport default function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}